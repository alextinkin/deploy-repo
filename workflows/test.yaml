name: Test Pipeline

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: gke-1mentor-cluster-1   # TODO: update to cluster name
  GKE_ZONE: us-central1-c   # TODO: update to cluster zone
  FOLDER: test
  IMAGE: 1mentor-frontend-pilot

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - run: git fetch --prune --unshallow
    
    - name: User Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - uses: artiomtr/jest-coverage-report-action@v2.0-rc.5
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        annotations: all
        test-script: npm run test:coverage

    
    - uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL}}

    
    - uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@v0.2.1
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE/$FOLDER:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          --build-arg REACT_APP_API_GRAPHQL=${{secrets.REACT_APP_API_TEST_GRAPHQL}} \
          --build-arg REACT_APP_MAP_MAPBOX=${{secrets.REACT_APP_MAP_MAPBOX}} \
          --build-arg REACT_APP_CONTACT_FORM_URL_IFRAME=${{secrets.REACT_APP_CONTACT_FORM_URL_IFRAME}} \
          --build-arg ENVIRONMENT=${{secrets.ENVIRONMENT}} \
          --build-arg MIXPANEL_TOKEN=${{secrets.MIXPANEL_TOKEN_WATERLOO}} \
          --build-arg FIREBASE_PROJECT=${{secrets.FIREBASE_PROJECT}} \
          --build-arg FIREBASE_API_KEY=${{secrets.FIREBASE_API_KEY}} \
          --build-arg FIREBASE_AUTH_DOMAIN=${{secrets.FIREBASE_AUTH_DOMAIN}} \
          --build-arg FIREBASE_STORAGE_BUCKET=${{secrets.FIREBASE_STORAGE_BUCKET}} \
          --build-arg FIREBASE_MESSAGING_SENDER_ID=${{secrets.FIREBASE_MESSAGING_SENDER_ID}} \
          --build-arg FIREBASE_APP_ID=${{secrets.FIREBASE_APP_ID}} \
          --build-arg FIREBASE_DATABASE_URL=${{secrets.FIREBASE_DATABASE_URL}} \
          --build-arg REACT_APP_GRAPHQL_SOCKET=${{secrets.REACT_APP_GRAPHQL_SOCKET_TEST}} \
          --build-arg REACT_APP_GRAPHQL_SOCKET_DEV=${{secrets.REACT_APP_GRAPHQL_SOCKET_DEV}} \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE/$FOLDER:$GITHUB_SHA"

    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-

        ./kustomize edit set image frontend-image=gcr.io/$PROJECT_ID/$IMAGE/$FOLDER:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
        
